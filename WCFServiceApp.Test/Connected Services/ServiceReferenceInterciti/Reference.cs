//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WCFServiceApp.Test.ServiceReferenceInterciti {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Admin", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class Admin : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ApellidoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CedulaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CorreoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool EstadoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime FechaNacimientoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdAdminField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NombreField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PassField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] PictureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TelefonoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TokenExternalLoginField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Apellido {
            get {
                return this.ApellidoField;
            }
            set {
                if ((object.ReferenceEquals(this.ApellidoField, value) != true)) {
                    this.ApellidoField = value;
                    this.RaisePropertyChanged("Apellido");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Cedula {
            get {
                return this.CedulaField;
            }
            set {
                if ((object.ReferenceEquals(this.CedulaField, value) != true)) {
                    this.CedulaField = value;
                    this.RaisePropertyChanged("Cedula");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Correo {
            get {
                return this.CorreoField;
            }
            set {
                if ((object.ReferenceEquals(this.CorreoField, value) != true)) {
                    this.CorreoField = value;
                    this.RaisePropertyChanged("Correo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Estado {
            get {
                return this.EstadoField;
            }
            set {
                if ((this.EstadoField.Equals(value) != true)) {
                    this.EstadoField = value;
                    this.RaisePropertyChanged("Estado");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime FechaNacimiento {
            get {
                return this.FechaNacimientoField;
            }
            set {
                if ((this.FechaNacimientoField.Equals(value) != true)) {
                    this.FechaNacimientoField = value;
                    this.RaisePropertyChanged("FechaNacimiento");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdAdmin {
            get {
                return this.IdAdminField;
            }
            set {
                if ((this.IdAdminField.Equals(value) != true)) {
                    this.IdAdminField = value;
                    this.RaisePropertyChanged("IdAdmin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Nombre {
            get {
                return this.NombreField;
            }
            set {
                if ((object.ReferenceEquals(this.NombreField, value) != true)) {
                    this.NombreField = value;
                    this.RaisePropertyChanged("Nombre");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Pass {
            get {
                return this.PassField;
            }
            set {
                if ((object.ReferenceEquals(this.PassField, value) != true)) {
                    this.PassField = value;
                    this.RaisePropertyChanged("Pass");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Picture {
            get {
                return this.PictureField;
            }
            set {
                if ((object.ReferenceEquals(this.PictureField, value) != true)) {
                    this.PictureField = value;
                    this.RaisePropertyChanged("Picture");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Telefono {
            get {
                return this.TelefonoField;
            }
            set {
                if ((object.ReferenceEquals(this.TelefonoField, value) != true)) {
                    this.TelefonoField = value;
                    this.RaisePropertyChanged("Telefono");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TokenExternalLogin {
            get {
                return this.TokenExternalLoginField;
            }
            set {
                if ((object.ReferenceEquals(this.TokenExternalLoginField, value) != true)) {
                    this.TokenExternalLoginField = value;
                    this.RaisePropertyChanged("TokenExternalLogin");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Cliente", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class Cliente : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ApellidoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CedulaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CorreoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime FechaNacimientoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdClienteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NombreField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PassField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] PictureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TelefonoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TokenExternalLoginField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Apellido {
            get {
                return this.ApellidoField;
            }
            set {
                if ((object.ReferenceEquals(this.ApellidoField, value) != true)) {
                    this.ApellidoField = value;
                    this.RaisePropertyChanged("Apellido");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Cedula {
            get {
                return this.CedulaField;
            }
            set {
                if ((object.ReferenceEquals(this.CedulaField, value) != true)) {
                    this.CedulaField = value;
                    this.RaisePropertyChanged("Cedula");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Correo {
            get {
                return this.CorreoField;
            }
            set {
                if ((object.ReferenceEquals(this.CorreoField, value) != true)) {
                    this.CorreoField = value;
                    this.RaisePropertyChanged("Correo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime FechaNacimiento {
            get {
                return this.FechaNacimientoField;
            }
            set {
                if ((this.FechaNacimientoField.Equals(value) != true)) {
                    this.FechaNacimientoField = value;
                    this.RaisePropertyChanged("FechaNacimiento");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdCliente {
            get {
                return this.IdClienteField;
            }
            set {
                if ((this.IdClienteField.Equals(value) != true)) {
                    this.IdClienteField = value;
                    this.RaisePropertyChanged("IdCliente");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Nombre {
            get {
                return this.NombreField;
            }
            set {
                if ((object.ReferenceEquals(this.NombreField, value) != true)) {
                    this.NombreField = value;
                    this.RaisePropertyChanged("Nombre");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Pass {
            get {
                return this.PassField;
            }
            set {
                if ((object.ReferenceEquals(this.PassField, value) != true)) {
                    this.PassField = value;
                    this.RaisePropertyChanged("Pass");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Picture {
            get {
                return this.PictureField;
            }
            set {
                if ((object.ReferenceEquals(this.PictureField, value) != true)) {
                    this.PictureField = value;
                    this.RaisePropertyChanged("Picture");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Telefono {
            get {
                return this.TelefonoField;
            }
            set {
                if ((object.ReferenceEquals(this.TelefonoField, value) != true)) {
                    this.TelefonoField = value;
                    this.RaisePropertyChanged("Telefono");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TokenExternalLogin {
            get {
                return this.TokenExternalLoginField;
            }
            set {
                if ((object.ReferenceEquals(this.TokenExternalLoginField, value) != true)) {
                    this.TokenExternalLoginField = value;
                    this.RaisePropertyChanged("TokenExternalLogin");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Conductor", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class Conductor : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ApellidoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CedulaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CorreoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool EstadoConductorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime FechaNacimientoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdConductorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NombreField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PassField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] PictureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TelefonoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TokenExternalLoginField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WCFServiceApp.Test.ServiceReferenceInterciti.Vehiculo VehiculoField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Apellido {
            get {
                return this.ApellidoField;
            }
            set {
                if ((object.ReferenceEquals(this.ApellidoField, value) != true)) {
                    this.ApellidoField = value;
                    this.RaisePropertyChanged("Apellido");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Cedula {
            get {
                return this.CedulaField;
            }
            set {
                if ((object.ReferenceEquals(this.CedulaField, value) != true)) {
                    this.CedulaField = value;
                    this.RaisePropertyChanged("Cedula");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Correo {
            get {
                return this.CorreoField;
            }
            set {
                if ((object.ReferenceEquals(this.CorreoField, value) != true)) {
                    this.CorreoField = value;
                    this.RaisePropertyChanged("Correo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool EstadoConductor {
            get {
                return this.EstadoConductorField;
            }
            set {
                if ((this.EstadoConductorField.Equals(value) != true)) {
                    this.EstadoConductorField = value;
                    this.RaisePropertyChanged("EstadoConductor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime FechaNacimiento {
            get {
                return this.FechaNacimientoField;
            }
            set {
                if ((this.FechaNacimientoField.Equals(value) != true)) {
                    this.FechaNacimientoField = value;
                    this.RaisePropertyChanged("FechaNacimiento");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdConductor {
            get {
                return this.IdConductorField;
            }
            set {
                if ((this.IdConductorField.Equals(value) != true)) {
                    this.IdConductorField = value;
                    this.RaisePropertyChanged("IdConductor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Nombre {
            get {
                return this.NombreField;
            }
            set {
                if ((object.ReferenceEquals(this.NombreField, value) != true)) {
                    this.NombreField = value;
                    this.RaisePropertyChanged("Nombre");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Pass {
            get {
                return this.PassField;
            }
            set {
                if ((object.ReferenceEquals(this.PassField, value) != true)) {
                    this.PassField = value;
                    this.RaisePropertyChanged("Pass");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Picture {
            get {
                return this.PictureField;
            }
            set {
                if ((object.ReferenceEquals(this.PictureField, value) != true)) {
                    this.PictureField = value;
                    this.RaisePropertyChanged("Picture");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Telefono {
            get {
                return this.TelefonoField;
            }
            set {
                if ((object.ReferenceEquals(this.TelefonoField, value) != true)) {
                    this.TelefonoField = value;
                    this.RaisePropertyChanged("Telefono");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TokenExternalLogin {
            get {
                return this.TokenExternalLoginField;
            }
            set {
                if ((object.ReferenceEquals(this.TokenExternalLoginField, value) != true)) {
                    this.TokenExternalLoginField = value;
                    this.RaisePropertyChanged("TokenExternalLogin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WCFServiceApp.Test.ServiceReferenceInterciti.Vehiculo Vehiculo {
            get {
                return this.VehiculoField;
            }
            set {
                if ((object.ReferenceEquals(this.VehiculoField, value) != true)) {
                    this.VehiculoField = value;
                    this.RaisePropertyChanged("Vehiculo");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Vehiculo", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class Vehiculo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Año1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdVehiculoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Marca1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Modelo1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] PictureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlacaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Tipo1Field;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Año1 {
            get {
                return this.Año1Field;
            }
            set {
                if ((object.ReferenceEquals(this.Año1Field, value) != true)) {
                    this.Año1Field = value;
                    this.RaisePropertyChanged("Año1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdVehiculo {
            get {
                return this.IdVehiculoField;
            }
            set {
                if ((this.IdVehiculoField.Equals(value) != true)) {
                    this.IdVehiculoField = value;
                    this.RaisePropertyChanged("IdVehiculo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Marca1 {
            get {
                return this.Marca1Field;
            }
            set {
                if ((object.ReferenceEquals(this.Marca1Field, value) != true)) {
                    this.Marca1Field = value;
                    this.RaisePropertyChanged("Marca1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Modelo1 {
            get {
                return this.Modelo1Field;
            }
            set {
                if ((object.ReferenceEquals(this.Modelo1Field, value) != true)) {
                    this.Modelo1Field = value;
                    this.RaisePropertyChanged("Modelo1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Picture {
            get {
                return this.PictureField;
            }
            set {
                if ((object.ReferenceEquals(this.PictureField, value) != true)) {
                    this.PictureField = value;
                    this.RaisePropertyChanged("Picture");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Placa {
            get {
                return this.PlacaField;
            }
            set {
                if ((object.ReferenceEquals(this.PlacaField, value) != true)) {
                    this.PlacaField = value;
                    this.RaisePropertyChanged("Placa");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Tipo1 {
            get {
                return this.Tipo1Field;
            }
            set {
                if ((object.ReferenceEquals(this.Tipo1Field, value) != true)) {
                    this.Tipo1Field = value;
                    this.RaisePropertyChanged("Tipo1");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Recorrido", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class Recorrido : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CalificacionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ComentarioField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DestinoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EstadoRecorridoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime FechaRecorridoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WCFServiceApp.Test.ServiceReferenceInterciti.Cliente IdClienteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WCFServiceApp.Test.ServiceReferenceInterciti.Conductor IdConductorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdRecorridoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal LatitudDestinoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal LatitudOrigenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal LongitudDestinoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal LongitudOrigenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OrigenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal ValorRecorridoField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Calificacion {
            get {
                return this.CalificacionField;
            }
            set {
                if ((this.CalificacionField.Equals(value) != true)) {
                    this.CalificacionField = value;
                    this.RaisePropertyChanged("Calificacion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Comentario {
            get {
                return this.ComentarioField;
            }
            set {
                if ((object.ReferenceEquals(this.ComentarioField, value) != true)) {
                    this.ComentarioField = value;
                    this.RaisePropertyChanged("Comentario");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Destino {
            get {
                return this.DestinoField;
            }
            set {
                if ((object.ReferenceEquals(this.DestinoField, value) != true)) {
                    this.DestinoField = value;
                    this.RaisePropertyChanged("Destino");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EstadoRecorrido {
            get {
                return this.EstadoRecorridoField;
            }
            set {
                if ((this.EstadoRecorridoField.Equals(value) != true)) {
                    this.EstadoRecorridoField = value;
                    this.RaisePropertyChanged("EstadoRecorrido");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime FechaRecorrido {
            get {
                return this.FechaRecorridoField;
            }
            set {
                if ((this.FechaRecorridoField.Equals(value) != true)) {
                    this.FechaRecorridoField = value;
                    this.RaisePropertyChanged("FechaRecorrido");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WCFServiceApp.Test.ServiceReferenceInterciti.Cliente IdCliente {
            get {
                return this.IdClienteField;
            }
            set {
                if ((object.ReferenceEquals(this.IdClienteField, value) != true)) {
                    this.IdClienteField = value;
                    this.RaisePropertyChanged("IdCliente");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WCFServiceApp.Test.ServiceReferenceInterciti.Conductor IdConductor {
            get {
                return this.IdConductorField;
            }
            set {
                if ((object.ReferenceEquals(this.IdConductorField, value) != true)) {
                    this.IdConductorField = value;
                    this.RaisePropertyChanged("IdConductor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdRecorrido {
            get {
                return this.IdRecorridoField;
            }
            set {
                if ((this.IdRecorridoField.Equals(value) != true)) {
                    this.IdRecorridoField = value;
                    this.RaisePropertyChanged("IdRecorrido");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal LatitudDestino {
            get {
                return this.LatitudDestinoField;
            }
            set {
                if ((this.LatitudDestinoField.Equals(value) != true)) {
                    this.LatitudDestinoField = value;
                    this.RaisePropertyChanged("LatitudDestino");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal LatitudOrigen {
            get {
                return this.LatitudOrigenField;
            }
            set {
                if ((this.LatitudOrigenField.Equals(value) != true)) {
                    this.LatitudOrigenField = value;
                    this.RaisePropertyChanged("LatitudOrigen");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal LongitudDestino {
            get {
                return this.LongitudDestinoField;
            }
            set {
                if ((this.LongitudDestinoField.Equals(value) != true)) {
                    this.LongitudDestinoField = value;
                    this.RaisePropertyChanged("LongitudDestino");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal LongitudOrigen {
            get {
                return this.LongitudOrigenField;
            }
            set {
                if ((this.LongitudOrigenField.Equals(value) != true)) {
                    this.LongitudOrigenField = value;
                    this.RaisePropertyChanged("LongitudOrigen");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Origen {
            get {
                return this.OrigenField;
            }
            set {
                if ((object.ReferenceEquals(this.OrigenField, value) != true)) {
                    this.OrigenField = value;
                    this.RaisePropertyChanged("Origen");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal ValorRecorrido {
            get {
                return this.ValorRecorridoField;
            }
            set {
                if ((this.ValorRecorridoField.Equals(value) != true)) {
                    this.ValorRecorridoField = value;
                    this.RaisePropertyChanged("ValorRecorrido");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AñoVehiculo", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class AñoVehiculo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AñoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdAñoField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Año {
            get {
                return this.AñoField;
            }
            set {
                if ((object.ReferenceEquals(this.AñoField, value) != true)) {
                    this.AñoField = value;
                    this.RaisePropertyChanged("Año");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdAño {
            get {
                return this.IdAñoField;
            }
            set {
                if ((this.IdAñoField.Equals(value) != true)) {
                    this.IdAñoField = value;
                    this.RaisePropertyChanged("IdAño");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ModeloVehiculo", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class ModeloVehiculo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdMarcaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdModeloField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ModeloField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdMarca {
            get {
                return this.IdMarcaField;
            }
            set {
                if ((this.IdMarcaField.Equals(value) != true)) {
                    this.IdMarcaField = value;
                    this.RaisePropertyChanged("IdMarca");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdModelo {
            get {
                return this.IdModeloField;
            }
            set {
                if ((this.IdModeloField.Equals(value) != true)) {
                    this.IdModeloField = value;
                    this.RaisePropertyChanged("IdModelo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Modelo {
            get {
                return this.ModeloField;
            }
            set {
                if ((object.ReferenceEquals(this.ModeloField, value) != true)) {
                    this.ModeloField = value;
                    this.RaisePropertyChanged("Modelo");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MisUbicaciones", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class MisUbicaciones : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DireccionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdCreadorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdUbicacionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal LatitudField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal LongitudField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Direccion {
            get {
                return this.DireccionField;
            }
            set {
                if ((object.ReferenceEquals(this.DireccionField, value) != true)) {
                    this.DireccionField = value;
                    this.RaisePropertyChanged("Direccion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdCreador {
            get {
                return this.IdCreadorField;
            }
            set {
                if ((this.IdCreadorField.Equals(value) != true)) {
                    this.IdCreadorField = value;
                    this.RaisePropertyChanged("IdCreador");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdUbicacion {
            get {
                return this.IdUbicacionField;
            }
            set {
                if ((this.IdUbicacionField.Equals(value) != true)) {
                    this.IdUbicacionField = value;
                    this.RaisePropertyChanged("IdUbicacion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Latitud {
            get {
                return this.LatitudField;
            }
            set {
                if ((this.LatitudField.Equals(value) != true)) {
                    this.LatitudField = value;
                    this.RaisePropertyChanged("Latitud");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Longitud {
            get {
                return this.LongitudField;
            }
            set {
                if ((this.LongitudField.Equals(value) != true)) {
                    this.LongitudField = value;
                    this.RaisePropertyChanged("Longitud");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TipoVehiculo", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class TipoVehiculo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdTipoVehiculoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TipoField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdTipoVehiculo {
            get {
                return this.IdTipoVehiculoField;
            }
            set {
                if ((this.IdTipoVehiculoField.Equals(value) != true)) {
                    this.IdTipoVehiculoField = value;
                    this.RaisePropertyChanged("IdTipoVehiculo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Tipo {
            get {
                return this.TipoField;
            }
            set {
                if ((object.ReferenceEquals(this.TipoField, value) != true)) {
                    this.TipoField = value;
                    this.RaisePropertyChanged("Tipo");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MarcaVehiculo", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class MarcaVehiculo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdMarcaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MarcaField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdMarca {
            get {
                return this.IdMarcaField;
            }
            set {
                if ((this.IdMarcaField.Equals(value) != true)) {
                    this.IdMarcaField = value;
                    this.RaisePropertyChanged("IdMarca");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Marca {
            get {
                return this.MarcaField;
            }
            set {
                if ((object.ReferenceEquals(this.MarcaField, value) != true)) {
                    this.MarcaField = value;
                    this.RaisePropertyChanged("Marca");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReferenceInterciti.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/FindAdminByID", ReplyAction="http://tempuri.org/IService/FindAdminByIDResponse")]
        WCFServiceApp.Test.ServiceReferenceInterciti.Admin FindAdminByID(int ci);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/FindAdminByID", ReplyAction="http://tempuri.org/IService/FindAdminByIDResponse")]
        System.Threading.Tasks.Task<WCFServiceApp.Test.ServiceReferenceInterciti.Admin> FindAdminByIDAsync(int ci);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/FindClienteByCorreo", ReplyAction="http://tempuri.org/IService/FindClienteByCorreoResponse")]
        WCFServiceApp.Test.ServiceReferenceInterciti.Cliente FindClienteByCorreo(string correo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/FindClienteByCorreo", ReplyAction="http://tempuri.org/IService/FindClienteByCorreoResponse")]
        System.Threading.Tasks.Task<WCFServiceApp.Test.ServiceReferenceInterciti.Cliente> FindClienteByCorreoAsync(string correo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/FindClienteByTelefono", ReplyAction="http://tempuri.org/IService/FindClienteByTelefonoResponse")]
        WCFServiceApp.Test.ServiceReferenceInterciti.Cliente FindClienteByTelefono(string correo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/FindClienteByTelefono", ReplyAction="http://tempuri.org/IService/FindClienteByTelefonoResponse")]
        System.Threading.Tasks.Task<WCFServiceApp.Test.ServiceReferenceInterciti.Cliente> FindClienteByTelefonoAsync(string correo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/FindConductorByTelefono", ReplyAction="http://tempuri.org/IService/FindConductorByTelefonoResponse")]
        WCFServiceApp.Test.ServiceReferenceInterciti.Conductor FindConductorByTelefono(string correo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/FindConductorByTelefono", ReplyAction="http://tempuri.org/IService/FindConductorByTelefonoResponse")]
        System.Threading.Tasks.Task<WCFServiceApp.Test.ServiceReferenceInterciti.Conductor> FindConductorByTelefonoAsync(string correo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/FindRecorridoById", ReplyAction="http://tempuri.org/IService/FindRecorridoByIdResponse")]
        WCFServiceApp.Test.ServiceReferenceInterciti.Recorrido FindRecorridoById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/FindRecorridoById", ReplyAction="http://tempuri.org/IService/FindRecorridoByIdResponse")]
        System.Threading.Tasks.Task<WCFServiceApp.Test.ServiceReferenceInterciti.Recorrido> FindRecorridoByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/FindAñoVehiculoByIdAño", ReplyAction="http://tempuri.org/IService/FindAñoVehiculoByIdAñoResponse")]
        WCFServiceApp.Test.ServiceReferenceInterciti.AñoVehiculo FindAñoVehiculoByIdAño(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/FindAñoVehiculoByIdAño", ReplyAction="http://tempuri.org/IService/FindAñoVehiculoByIdAñoResponse")]
        System.Threading.Tasks.Task<WCFServiceApp.Test.ServiceReferenceInterciti.AñoVehiculo> FindAñoVehiculoByIdAñoAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/FindModeloVehiculoByModelo", ReplyAction="http://tempuri.org/IService/FindModeloVehiculoByModeloResponse")]
        WCFServiceApp.Test.ServiceReferenceInterciti.ModeloVehiculo FindModeloVehiculoByModelo(string nombre);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/FindModeloVehiculoByModelo", ReplyAction="http://tempuri.org/IService/FindModeloVehiculoByModeloResponse")]
        System.Threading.Tasks.Task<WCFServiceApp.Test.ServiceReferenceInterciti.ModeloVehiculo> FindModeloVehiculoByModeloAsync(string nombre);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/FindTipoVehiculoByTipo", ReplyAction="http://tempuri.org/IService/FindTipoVehiculoByTipoResponse")]
        int FindTipoVehiculoByTipo(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/FindTipoVehiculoByTipo", ReplyAction="http://tempuri.org/IService/FindTipoVehiculoByTipoResponse")]
        System.Threading.Tasks.Task<int> FindTipoVehiculoByTipoAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GenerarPass", ReplyAction="http://tempuri.org/IService/GenerarPassResponse")]
        string GenerarPass();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GenerarPass", ReplyAction="http://tempuri.org/IService/GenerarPassResponse")]
        System.Threading.Tasks.Task<string> GenerarPassAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ListarUbicaciones", ReplyAction="http://tempuri.org/IService/ListarUbicacionesResponse")]
        System.Collections.Generic.List<WCFServiceApp.Test.ServiceReferenceInterciti.MisUbicaciones> ListarUbicaciones(int idCliente);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ListarUbicaciones", ReplyAction="http://tempuri.org/IService/ListarUbicacionesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WCFServiceApp.Test.ServiceReferenceInterciti.MisUbicaciones>> ListarUbicacionesAsync(int idCliente);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/FindUbicacionByNombre", ReplyAction="http://tempuri.org/IService/FindUbicacionByNombreResponse")]
        WCFServiceApp.Test.ServiceReferenceInterciti.MisUbicaciones FindUbicacionByNombre(string nombre, int idCliente);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/FindUbicacionByNombre", ReplyAction="http://tempuri.org/IService/FindUbicacionByNombreResponse")]
        System.Threading.Tasks.Task<WCFServiceApp.Test.ServiceReferenceInterciti.MisUbicaciones> FindUbicacionByNombreAsync(string nombre, int idCliente);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/FindUbicacionByID", ReplyAction="http://tempuri.org/IService/FindUbicacionByIDResponse")]
        WCFServiceApp.Test.ServiceReferenceInterciti.MisUbicaciones FindUbicacionByID(int cedula);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/FindUbicacionByID", ReplyAction="http://tempuri.org/IService/FindUbicacionByIDResponse")]
        System.Threading.Tasks.Task<WCFServiceApp.Test.ServiceReferenceInterciti.MisUbicaciones> FindUbicacionByIDAsync(int cedula);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/EliminarUbicacionesTemporales", ReplyAction="http://tempuri.org/IService/EliminarUbicacionesTemporalesResponse")]
        int EliminarUbicacionesTemporales(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/EliminarUbicacionesTemporales", ReplyAction="http://tempuri.org/IService/EliminarUbicacionesTemporalesResponse")]
        System.Threading.Tasks.Task<int> EliminarUbicacionesTemporalesAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetRecorridos", ReplyAction="http://tempuri.org/IService/GetRecorridosResponse")]
        System.Collections.Generic.List<WCFServiceApp.Test.ServiceReferenceInterciti.Recorrido> GetRecorridos(int op);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetRecorridos", ReplyAction="http://tempuri.org/IService/GetRecorridosResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WCFServiceApp.Test.ServiceReferenceInterciti.Recorrido>> GetRecorridosAsync(int op);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AgregarUbicaciones", ReplyAction="http://tempuri.org/IService/AgregarUbicacionesResponse")]
        int AgregarUbicaciones(decimal lat, decimal lng, int idCreador, string nombre);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AgregarUbicaciones", ReplyAction="http://tempuri.org/IService/AgregarUbicacionesResponse")]
        System.Threading.Tasks.Task<int> AgregarUbicacionesAsync(decimal lat, decimal lng, int idCreador, string nombre);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/FindRecorridosByCliente", ReplyAction="http://tempuri.org/IService/FindRecorridosByClienteResponse")]
        System.Collections.Generic.List<WCFServiceApp.Test.ServiceReferenceInterciti.Recorrido> FindRecorridosByCliente(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/FindRecorridosByCliente", ReplyAction="http://tempuri.org/IService/FindRecorridosByClienteResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WCFServiceApp.Test.ServiceReferenceInterciti.Recorrido>> FindRecorridosByClienteAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/FindRecorridosByConductor", ReplyAction="http://tempuri.org/IService/FindRecorridosByConductorResponse")]
        System.Collections.Generic.List<WCFServiceApp.Test.ServiceReferenceInterciti.Recorrido> FindRecorridosByConductor(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/FindRecorridosByConductor", ReplyAction="http://tempuri.org/IService/FindRecorridosByConductorResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WCFServiceApp.Test.ServiceReferenceInterciti.Recorrido>> FindRecorridosByConductorAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SenMail", ReplyAction="http://tempuri.org/IService/SenMailResponse")]
        bool SenMail(string to, string asunto, string mensaje);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SenMail", ReplyAction="http://tempuri.org/IService/SenMailResponse")]
        System.Threading.Tasks.Task<bool> SenMailAsync(string to, string asunto, string mensaje);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/BuscarUbicaciones", ReplyAction="http://tempuri.org/IService/BuscarUbicacionesResponse")]
        System.Collections.Generic.List<WCFServiceApp.Test.ServiceReferenceInterciti.MisUbicaciones> BuscarUbicaciones(int idCliente, string texto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/BuscarUbicaciones", ReplyAction="http://tempuri.org/IService/BuscarUbicacionesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WCFServiceApp.Test.ServiceReferenceInterciti.MisUbicaciones>> BuscarUbicacionesAsync(int idCliente, string texto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/BuscarVehiculo", ReplyAction="http://tempuri.org/IService/BuscarVehiculoResponse")]
        System.Collections.Generic.List<WCFServiceApp.Test.ServiceReferenceInterciti.Vehiculo> BuscarVehiculo(string texto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/BuscarVehiculo", ReplyAction="http://tempuri.org/IService/BuscarVehiculoResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WCFServiceApp.Test.ServiceReferenceInterciti.Vehiculo>> BuscarVehiculoAsync(string texto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/BuscarRecorrido", ReplyAction="http://tempuri.org/IService/BuscarRecorridoResponse")]
        System.Collections.Generic.List<WCFServiceApp.Test.ServiceReferenceInterciti.Recorrido> BuscarRecorrido(int idCliente, string texto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/BuscarRecorrido", ReplyAction="http://tempuri.org/IService/BuscarRecorridoResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WCFServiceApp.Test.ServiceReferenceInterciti.Recorrido>> BuscarRecorridoAsync(int idCliente, string texto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/BuscarRecorridoCo", ReplyAction="http://tempuri.org/IService/BuscarRecorridoCoResponse")]
        System.Collections.Generic.List<WCFServiceApp.Test.ServiceReferenceInterciti.Recorrido> BuscarRecorridoCo(int idConductor, string texto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/BuscarRecorridoCo", ReplyAction="http://tempuri.org/IService/BuscarRecorridoCoResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WCFServiceApp.Test.ServiceReferenceInterciti.Recorrido>> BuscarRecorridoCoAsync(int idConductor, string texto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/EliminarUbicaciones", ReplyAction="http://tempuri.org/IService/EliminarUbicacionesResponse")]
        int EliminarUbicaciones(int idConductor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/EliminarUbicaciones", ReplyAction="http://tempuri.org/IService/EliminarUbicacionesResponse")]
        System.Threading.Tasks.Task<int> EliminarUbicacionesAsync(int idConductor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ActualizarUbicaciones", ReplyAction="http://tempuri.org/IService/ActualizarUbicacionesResponse")]
        int ActualizarUbicaciones(WCFServiceApp.Test.ServiceReferenceInterciti.MisUbicaciones conductor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ActualizarUbicaciones", ReplyAction="http://tempuri.org/IService/ActualizarUbicacionesResponse")]
        System.Threading.Tasks.Task<int> ActualizarUbicacionesAsync(WCFServiceApp.Test.ServiceReferenceInterciti.MisUbicaciones conductor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/FindMarcaVehiculoByMarca", ReplyAction="http://tempuri.org/IService/FindMarcaVehiculoByMarcaResponse")]
        int FindMarcaVehiculoByMarca(string nombre);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/FindMarcaVehiculoByMarca", ReplyAction="http://tempuri.org/IService/FindMarcaVehiculoByMarcaResponse")]
        System.Threading.Tasks.Task<int> FindMarcaVehiculoByMarcaAsync(string nombre);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/FindConductorByMail", ReplyAction="http://tempuri.org/IService/FindConductorByMailResponse")]
        WCFServiceApp.Test.ServiceReferenceInterciti.Conductor FindConductorByMail(string ci);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/FindConductorByMail", ReplyAction="http://tempuri.org/IService/FindConductorByMailResponse")]
        System.Threading.Tasks.Task<WCFServiceApp.Test.ServiceReferenceInterciti.Conductor> FindConductorByMailAsync(string ci);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AgregarCliente", ReplyAction="http://tempuri.org/IService/AgregarClienteResponse")]
        int AgregarCliente(string nombre, string pass, string apellido, string cedula, string correo, string telefono, System.DateTime fechaNacimiento, string token, byte[] pic);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AgregarCliente", ReplyAction="http://tempuri.org/IService/AgregarClienteResponse")]
        System.Threading.Tasks.Task<int> AgregarClienteAsync(string nombre, string pass, string apellido, string cedula, string correo, string telefono, System.DateTime fechaNacimiento, string token, byte[] pic);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ListarClientes", ReplyAction="http://tempuri.org/IService/ListarClientesResponse")]
        System.Collections.Generic.List<WCFServiceApp.Test.ServiceReferenceInterciti.Cliente> ListarClientes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ListarClientes", ReplyAction="http://tempuri.org/IService/ListarClientesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WCFServiceApp.Test.ServiceReferenceInterciti.Cliente>> ListarClientesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/EliminarCliente", ReplyAction="http://tempuri.org/IService/EliminarClienteResponse")]
        int EliminarCliente(int idCliente);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/EliminarCliente", ReplyAction="http://tempuri.org/IService/EliminarClienteResponse")]
        System.Threading.Tasks.Task<int> EliminarClienteAsync(int idCliente);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ActualizarCliente", ReplyAction="http://tempuri.org/IService/ActualizarClienteResponse")]
        int ActualizarCliente(WCFServiceApp.Test.ServiceReferenceInterciti.Cliente cliente);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ActualizarCliente", ReplyAction="http://tempuri.org/IService/ActualizarClienteResponse")]
        System.Threading.Tasks.Task<int> ActualizarClienteAsync(WCFServiceApp.Test.ServiceReferenceInterciti.Cliente cliente);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AgregarConductores", ReplyAction="http://tempuri.org/IService/AgregarConductoresResponse")]
        int AgregarConductores(string nombre, string pass, int idVehiculo, string apellido, string cedula, string correo, string telefono, System.DateTime fechaNacimiento, bool estado, string token, byte[] pic);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AgregarConductores", ReplyAction="http://tempuri.org/IService/AgregarConductoresResponse")]
        System.Threading.Tasks.Task<int> AgregarConductoresAsync(string nombre, string pass, int idVehiculo, string apellido, string cedula, string correo, string telefono, System.DateTime fechaNacimiento, bool estado, string token, byte[] pic);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ListarConductores", ReplyAction="http://tempuri.org/IService/ListarConductoresResponse")]
        System.Collections.Generic.List<WCFServiceApp.Test.ServiceReferenceInterciti.Conductor> ListarConductores();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ListarConductores", ReplyAction="http://tempuri.org/IService/ListarConductoresResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WCFServiceApp.Test.ServiceReferenceInterciti.Conductor>> ListarConductoresAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/EliminarConductor", ReplyAction="http://tempuri.org/IService/EliminarConductorResponse")]
        int EliminarConductor(int idConductor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/EliminarConductor", ReplyAction="http://tempuri.org/IService/EliminarConductorResponse")]
        System.Threading.Tasks.Task<int> EliminarConductorAsync(int idConductor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ActualizarConductor", ReplyAction="http://tempuri.org/IService/ActualizarConductorResponse")]
        int ActualizarConductor(WCFServiceApp.Test.ServiceReferenceInterciti.Conductor conductor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ActualizarConductor", ReplyAction="http://tempuri.org/IService/ActualizarConductorResponse")]
        System.Threading.Tasks.Task<int> ActualizarConductorAsync(WCFServiceApp.Test.ServiceReferenceInterciti.Conductor conductor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AgregarAdmin", ReplyAction="http://tempuri.org/IService/AgregarAdminResponse")]
        int AgregarAdmin(string nombre, string pass, string apellido, string cedula, string correo, string telefono, System.DateTime fechaNacimiento, bool estado, string token, byte[] pic);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AgregarAdmin", ReplyAction="http://tempuri.org/IService/AgregarAdminResponse")]
        System.Threading.Tasks.Task<int> AgregarAdminAsync(string nombre, string pass, string apellido, string cedula, string correo, string telefono, System.DateTime fechaNacimiento, bool estado, string token, byte[] pic);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ListarAdmin", ReplyAction="http://tempuri.org/IService/ListarAdminResponse")]
        System.Collections.Generic.List<WCFServiceApp.Test.ServiceReferenceInterciti.Admin> ListarAdmin();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ListarAdmin", ReplyAction="http://tempuri.org/IService/ListarAdminResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WCFServiceApp.Test.ServiceReferenceInterciti.Admin>> ListarAdminAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/EliminarAdmin", ReplyAction="http://tempuri.org/IService/EliminarAdminResponse")]
        int EliminarAdmin(int idAdmin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/EliminarAdmin", ReplyAction="http://tempuri.org/IService/EliminarAdminResponse")]
        System.Threading.Tasks.Task<int> EliminarAdminAsync(int idAdmin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ActualizarAdmin", ReplyAction="http://tempuri.org/IService/ActualizarAdminResponse")]
        int ActualizarAdmin(WCFServiceApp.Test.ServiceReferenceInterciti.Admin admin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ActualizarAdmin", ReplyAction="http://tempuri.org/IService/ActualizarAdminResponse")]
        System.Threading.Tasks.Task<int> ActualizarAdminAsync(WCFServiceApp.Test.ServiceReferenceInterciti.Admin admin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ActualizarTipo", ReplyAction="http://tempuri.org/IService/ActualizarTipoResponse")]
        int ActualizarTipo(WCFServiceApp.Test.ServiceReferenceInterciti.TipoVehiculo admin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ActualizarTipo", ReplyAction="http://tempuri.org/IService/ActualizarTipoResponse")]
        System.Threading.Tasks.Task<int> ActualizarTipoAsync(WCFServiceApp.Test.ServiceReferenceInterciti.TipoVehiculo admin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ActualizarModelo", ReplyAction="http://tempuri.org/IService/ActualizarModeloResponse")]
        int ActualizarModelo(WCFServiceApp.Test.ServiceReferenceInterciti.ModeloVehiculo admin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ActualizarModelo", ReplyAction="http://tempuri.org/IService/ActualizarModeloResponse")]
        System.Threading.Tasks.Task<int> ActualizarModeloAsync(WCFServiceApp.Test.ServiceReferenceInterciti.ModeloVehiculo admin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ActualizarMarca", ReplyAction="http://tempuri.org/IService/ActualizarMarcaResponse")]
        int ActualizarMarca(WCFServiceApp.Test.ServiceReferenceInterciti.MarcaVehiculo admin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ActualizarMarca", ReplyAction="http://tempuri.org/IService/ActualizarMarcaResponse")]
        System.Threading.Tasks.Task<int> ActualizarMarcaAsync(WCFServiceApp.Test.ServiceReferenceInterciti.MarcaVehiculo admin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ActualizarAnio", ReplyAction="http://tempuri.org/IService/ActualizarAnioResponse")]
        int ActualizarAnio(WCFServiceApp.Test.ServiceReferenceInterciti.AñoVehiculo admin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ActualizarAnio", ReplyAction="http://tempuri.org/IService/ActualizarAnioResponse")]
        System.Threading.Tasks.Task<int> ActualizarAnioAsync(WCFServiceApp.Test.ServiceReferenceInterciti.AñoVehiculo admin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AgregarVehiculo", ReplyAction="http://tempuri.org/IService/AgregarVehiculoResponse")]
        int AgregarVehiculo(string placa, int tipo, int modelo, int año, int marca, byte[] pic);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AgregarVehiculo", ReplyAction="http://tempuri.org/IService/AgregarVehiculoResponse")]
        System.Threading.Tasks.Task<int> AgregarVehiculoAsync(string placa, int tipo, int modelo, int año, int marca, byte[] pic);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ListarVehiculo", ReplyAction="http://tempuri.org/IService/ListarVehiculoResponse")]
        System.Collections.Generic.List<WCFServiceApp.Test.ServiceReferenceInterciti.Vehiculo> ListarVehiculo();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ListarVehiculo", ReplyAction="http://tempuri.org/IService/ListarVehiculoResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WCFServiceApp.Test.ServiceReferenceInterciti.Vehiculo>> ListarVehiculoAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/EliminarVehiculo", ReplyAction="http://tempuri.org/IService/EliminarVehiculoResponse")]
        int EliminarVehiculo(int idVehiculo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/EliminarVehiculo", ReplyAction="http://tempuri.org/IService/EliminarVehiculoResponse")]
        System.Threading.Tasks.Task<int> EliminarVehiculoAsync(int idVehiculo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ActualizarVehiculo", ReplyAction="http://tempuri.org/IService/ActualizarVehiculoResponse")]
        int ActualizarVehiculo(WCFServiceApp.Test.ServiceReferenceInterciti.Vehiculo vehiculo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ActualizarVehiculo", ReplyAction="http://tempuri.org/IService/ActualizarVehiculoResponse")]
        System.Threading.Tasks.Task<int> ActualizarVehiculoAsync(WCFServiceApp.Test.ServiceReferenceInterciti.Vehiculo vehiculo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ListarRecorrido", ReplyAction="http://tempuri.org/IService/ListarRecorridoResponse")]
        System.Collections.Generic.List<WCFServiceApp.Test.ServiceReferenceInterciti.Recorrido> ListarRecorrido();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ListarRecorrido", ReplyAction="http://tempuri.org/IService/ListarRecorridoResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WCFServiceApp.Test.ServiceReferenceInterciti.Recorrido>> ListarRecorridoAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AgregarRecorrido", ReplyAction="http://tempuri.org/IService/AgregarRecorridoResponse")]
        int AgregarRecorrido(decimal latitudOrigen, decimal longitudOrigen, decimal longitudDestino, decimal latitudDestino, System.DateTime fechaRecorrido, decimal valorRecorrido, int idConductor, int idCliente, int estado, int calif, string comentario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AgregarRecorrido", ReplyAction="http://tempuri.org/IService/AgregarRecorridoResponse")]
        System.Threading.Tasks.Task<int> AgregarRecorridoAsync(decimal latitudOrigen, decimal longitudOrigen, decimal longitudDestino, decimal latitudDestino, System.DateTime fechaRecorrido, decimal valorRecorrido, int idConductor, int idCliente, int estado, int calif, string comentario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/EliminarRecorrido", ReplyAction="http://tempuri.org/IService/EliminarRecorridoResponse")]
        int EliminarRecorrido(int idRecorrido);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/EliminarRecorrido", ReplyAction="http://tempuri.org/IService/EliminarRecorridoResponse")]
        System.Threading.Tasks.Task<int> EliminarRecorridoAsync(int idRecorrido);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ActualizarRecorrido", ReplyAction="http://tempuri.org/IService/ActualizarRecorridoResponse")]
        int ActualizarRecorrido(WCFServiceApp.Test.ServiceReferenceInterciti.Recorrido recorrido);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ActualizarRecorrido", ReplyAction="http://tempuri.org/IService/ActualizarRecorridoResponse")]
        System.Threading.Tasks.Task<int> ActualizarRecorridoAsync(WCFServiceApp.Test.ServiceReferenceInterciti.Recorrido recorrido);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/FindClienteByID", ReplyAction="http://tempuri.org/IService/FindClienteByIDResponse")]
        WCFServiceApp.Test.ServiceReferenceInterciti.Cliente FindClienteByID(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/FindClienteByID", ReplyAction="http://tempuri.org/IService/FindClienteByIDResponse")]
        System.Threading.Tasks.Task<WCFServiceApp.Test.ServiceReferenceInterciti.Cliente> FindClienteByIDAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/sha512_hash", ReplyAction="http://tempuri.org/IService/sha512_hashResponse")]
        string sha512_hash(string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/sha512_hash", ReplyAction="http://tempuri.org/IService/sha512_hashResponse")]
        System.Threading.Tasks.Task<string> sha512_hashAsync(string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/sha256_hash", ReplyAction="http://tempuri.org/IService/sha256_hashResponse")]
        string sha256_hash(string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/sha256_hash", ReplyAction="http://tempuri.org/IService/sha256_hashResponse")]
        System.Threading.Tasks.Task<string> sha256_hashAsync(string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/FindConductorByCI", ReplyAction="http://tempuri.org/IService/FindConductorByCIResponse")]
        WCFServiceApp.Test.ServiceReferenceInterciti.Conductor FindConductorByCI(string ci);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/FindConductorByCI", ReplyAction="http://tempuri.org/IService/FindConductorByCIResponse")]
        System.Threading.Tasks.Task<WCFServiceApp.Test.ServiceReferenceInterciti.Conductor> FindConductorByCIAsync(string ci);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/FindConductorByID", ReplyAction="http://tempuri.org/IService/FindConductorByIDResponse")]
        WCFServiceApp.Test.ServiceReferenceInterciti.Conductor FindConductorByID(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/FindConductorByID", ReplyAction="http://tempuri.org/IService/FindConductorByIDResponse")]
        System.Threading.Tasks.Task<WCFServiceApp.Test.ServiceReferenceInterciti.Conductor> FindConductorByIDAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/FindVehiculoByID", ReplyAction="http://tempuri.org/IService/FindVehiculoByIDResponse")]
        WCFServiceApp.Test.ServiceReferenceInterciti.Vehiculo FindVehiculoByID(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/FindVehiculoByID", ReplyAction="http://tempuri.org/IService/FindVehiculoByIDResponse")]
        System.Threading.Tasks.Task<WCFServiceApp.Test.ServiceReferenceInterciti.Vehiculo> FindVehiculoByIDAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AgregarTipoVehiculo", ReplyAction="http://tempuri.org/IService/AgregarTipoVehiculoResponse")]
        int AgregarTipoVehiculo(string tipo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AgregarTipoVehiculo", ReplyAction="http://tempuri.org/IService/AgregarTipoVehiculoResponse")]
        System.Threading.Tasks.Task<int> AgregarTipoVehiculoAsync(string tipo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ListarTipoVehiculo", ReplyAction="http://tempuri.org/IService/ListarTipoVehiculoResponse")]
        System.Collections.Generic.List<WCFServiceApp.Test.ServiceReferenceInterciti.TipoVehiculo> ListarTipoVehiculo();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ListarTipoVehiculo", ReplyAction="http://tempuri.org/IService/ListarTipoVehiculoResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WCFServiceApp.Test.ServiceReferenceInterciti.TipoVehiculo>> ListarTipoVehiculoAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/EliminarTipoVehiculo", ReplyAction="http://tempuri.org/IService/EliminarTipoVehiculoResponse")]
        int EliminarTipoVehiculo(int idTipoVehiculo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/EliminarTipoVehiculo", ReplyAction="http://tempuri.org/IService/EliminarTipoVehiculoResponse")]
        System.Threading.Tasks.Task<int> EliminarTipoVehiculoAsync(int idTipoVehiculo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ListarMarcaVehiculo", ReplyAction="http://tempuri.org/IService/ListarMarcaVehiculoResponse")]
        System.Collections.Generic.List<WCFServiceApp.Test.ServiceReferenceInterciti.MarcaVehiculo> ListarMarcaVehiculo();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ListarMarcaVehiculo", ReplyAction="http://tempuri.org/IService/ListarMarcaVehiculoResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WCFServiceApp.Test.ServiceReferenceInterciti.MarcaVehiculo>> ListarMarcaVehiculoAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/EliminarMarcaVehiculo", ReplyAction="http://tempuri.org/IService/EliminarMarcaVehiculoResponse")]
        int EliminarMarcaVehiculo(int idMarcaVehiculo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/EliminarMarcaVehiculo", ReplyAction="http://tempuri.org/IService/EliminarMarcaVehiculoResponse")]
        System.Threading.Tasks.Task<int> EliminarMarcaVehiculoAsync(int idMarcaVehiculo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AgregarAñoVehiculo", ReplyAction="http://tempuri.org/IService/AgregarAñoVehiculoResponse")]
        int AgregarAñoVehiculo(string año);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AgregarAñoVehiculo", ReplyAction="http://tempuri.org/IService/AgregarAñoVehiculoResponse")]
        System.Threading.Tasks.Task<int> AgregarAñoVehiculoAsync(string año);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ListarAnioVehiculo", ReplyAction="http://tempuri.org/IService/ListarAnioVehiculoResponse")]
        System.Collections.Generic.List<WCFServiceApp.Test.ServiceReferenceInterciti.AñoVehiculo> ListarAnioVehiculo();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ListarAnioVehiculo", ReplyAction="http://tempuri.org/IService/ListarAnioVehiculoResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WCFServiceApp.Test.ServiceReferenceInterciti.AñoVehiculo>> ListarAnioVehiculoAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/EliminarAñoVehiculo", ReplyAction="http://tempuri.org/IService/EliminarAñoVehiculoResponse")]
        int EliminarAñoVehiculo(int idÁñoVehiculo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/EliminarAñoVehiculo", ReplyAction="http://tempuri.org/IService/EliminarAñoVehiculoResponse")]
        System.Threading.Tasks.Task<int> EliminarAñoVehiculoAsync(int idÁñoVehiculo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AgregarModeloVehiculo", ReplyAction="http://tempuri.org/IService/AgregarModeloVehiculoResponse")]
        int AgregarModeloVehiculo(string año, int idMarca);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AgregarModeloVehiculo", ReplyAction="http://tempuri.org/IService/AgregarModeloVehiculoResponse")]
        System.Threading.Tasks.Task<int> AgregarModeloVehiculoAsync(string año, int idMarca);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AgregarMarcaVehiculo", ReplyAction="http://tempuri.org/IService/AgregarMarcaVehiculoResponse")]
        int AgregarMarcaVehiculo(string marca);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AgregarMarcaVehiculo", ReplyAction="http://tempuri.org/IService/AgregarMarcaVehiculoResponse")]
        System.Threading.Tasks.Task<int> AgregarMarcaVehiculoAsync(string marca);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ListarModeloVehiculo", ReplyAction="http://tempuri.org/IService/ListarModeloVehiculoResponse")]
        System.Collections.Generic.List<WCFServiceApp.Test.ServiceReferenceInterciti.ModeloVehiculo> ListarModeloVehiculo();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ListarModeloVehiculo", ReplyAction="http://tempuri.org/IService/ListarModeloVehiculoResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WCFServiceApp.Test.ServiceReferenceInterciti.ModeloVehiculo>> ListarModeloVehiculoAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/EliminarModeloVehiculo", ReplyAction="http://tempuri.org/IService/EliminarModeloVehiculoResponse")]
        int EliminarModeloVehiculo(int idÁñoVehiculo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/EliminarModeloVehiculo", ReplyAction="http://tempuri.org/IService/EliminarModeloVehiculoResponse")]
        System.Threading.Tasks.Task<int> EliminarModeloVehiculoAsync(int idÁñoVehiculo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/FindTipoVehiculoById", ReplyAction="http://tempuri.org/IService/FindTipoVehiculoByIdResponse")]
        WCFServiceApp.Test.ServiceReferenceInterciti.TipoVehiculo FindTipoVehiculoById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/FindTipoVehiculoById", ReplyAction="http://tempuri.org/IService/FindTipoVehiculoByIdResponse")]
        System.Threading.Tasks.Task<WCFServiceApp.Test.ServiceReferenceInterciti.TipoVehiculo> FindTipoVehiculoByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/FindAñoVehiculoById", ReplyAction="http://tempuri.org/IService/FindAñoVehiculoByIdResponse")]
        WCFServiceApp.Test.ServiceReferenceInterciti.AñoVehiculo FindAñoVehiculoById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/FindAñoVehiculoById", ReplyAction="http://tempuri.org/IService/FindAñoVehiculoByIdResponse")]
        System.Threading.Tasks.Task<WCFServiceApp.Test.ServiceReferenceInterciti.AñoVehiculo> FindAñoVehiculoByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/FindMarcaVehiculoById", ReplyAction="http://tempuri.org/IService/FindMarcaVehiculoByIdResponse")]
        WCFServiceApp.Test.ServiceReferenceInterciti.MarcaVehiculo FindMarcaVehiculoById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/FindMarcaVehiculoById", ReplyAction="http://tempuri.org/IService/FindMarcaVehiculoByIdResponse")]
        System.Threading.Tasks.Task<WCFServiceApp.Test.ServiceReferenceInterciti.MarcaVehiculo> FindMarcaVehiculoByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/FindModeloVehiculoById", ReplyAction="http://tempuri.org/IService/FindModeloVehiculoByIdResponse")]
        WCFServiceApp.Test.ServiceReferenceInterciti.ModeloVehiculo FindModeloVehiculoById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/FindModeloVehiculoById", ReplyAction="http://tempuri.org/IService/FindModeloVehiculoByIdResponse")]
        System.Threading.Tasks.Task<WCFServiceApp.Test.ServiceReferenceInterciti.ModeloVehiculo> FindModeloVehiculoByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/FindModeloVehiculoByMarca", ReplyAction="http://tempuri.org/IService/FindModeloVehiculoByMarcaResponse")]
        System.Collections.Generic.List<WCFServiceApp.Test.ServiceReferenceInterciti.ModeloVehiculo> FindModeloVehiculoByMarca(int idMarca);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/FindModeloVehiculoByMarca", ReplyAction="http://tempuri.org/IService/FindModeloVehiculoByMarcaResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WCFServiceApp.Test.ServiceReferenceInterciti.ModeloVehiculo>> FindModeloVehiculoByMarcaAsync(int idMarca);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/FindClienteByCI", ReplyAction="http://tempuri.org/IService/FindClienteByCIResponse")]
        WCFServiceApp.Test.ServiceReferenceInterciti.Cliente FindClienteByCI(string cedula);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/FindClienteByCI", ReplyAction="http://tempuri.org/IService/FindClienteByCIResponse")]
        System.Threading.Tasks.Task<WCFServiceApp.Test.ServiceReferenceInterciti.Cliente> FindClienteByCIAsync(string cedula);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/FindAdminByCI", ReplyAction="http://tempuri.org/IService/FindAdminByCIResponse")]
        WCFServiceApp.Test.ServiceReferenceInterciti.Admin FindAdminByCI(string ci);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/FindAdminByCI", ReplyAction="http://tempuri.org/IService/FindAdminByCIResponse")]
        System.Threading.Tasks.Task<WCFServiceApp.Test.ServiceReferenceInterciti.Admin> FindAdminByCIAsync(string ci);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/FindAdminByCorreo", ReplyAction="http://tempuri.org/IService/FindAdminByCorreoResponse")]
        WCFServiceApp.Test.ServiceReferenceInterciti.Admin FindAdminByCorreo(string ci);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/FindAdminByCorreo", ReplyAction="http://tempuri.org/IService/FindAdminByCorreoResponse")]
        System.Threading.Tasks.Task<WCFServiceApp.Test.ServiceReferenceInterciti.Admin> FindAdminByCorreoAsync(string ci);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : WCFServiceApp.Test.ServiceReferenceInterciti.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<WCFServiceApp.Test.ServiceReferenceInterciti.IService>, WCFServiceApp.Test.ServiceReferenceInterciti.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public WCFServiceApp.Test.ServiceReferenceInterciti.Admin FindAdminByID(int ci) {
            return base.Channel.FindAdminByID(ci);
        }
        
        public System.Threading.Tasks.Task<WCFServiceApp.Test.ServiceReferenceInterciti.Admin> FindAdminByIDAsync(int ci) {
            return base.Channel.FindAdminByIDAsync(ci);
        }
        
        public WCFServiceApp.Test.ServiceReferenceInterciti.Cliente FindClienteByCorreo(string correo) {
            return base.Channel.FindClienteByCorreo(correo);
        }
        
        public System.Threading.Tasks.Task<WCFServiceApp.Test.ServiceReferenceInterciti.Cliente> FindClienteByCorreoAsync(string correo) {
            return base.Channel.FindClienteByCorreoAsync(correo);
        }
        
        public WCFServiceApp.Test.ServiceReferenceInterciti.Cliente FindClienteByTelefono(string correo) {
            return base.Channel.FindClienteByTelefono(correo);
        }
        
        public System.Threading.Tasks.Task<WCFServiceApp.Test.ServiceReferenceInterciti.Cliente> FindClienteByTelefonoAsync(string correo) {
            return base.Channel.FindClienteByTelefonoAsync(correo);
        }
        
        public WCFServiceApp.Test.ServiceReferenceInterciti.Conductor FindConductorByTelefono(string correo) {
            return base.Channel.FindConductorByTelefono(correo);
        }
        
        public System.Threading.Tasks.Task<WCFServiceApp.Test.ServiceReferenceInterciti.Conductor> FindConductorByTelefonoAsync(string correo) {
            return base.Channel.FindConductorByTelefonoAsync(correo);
        }
        
        public WCFServiceApp.Test.ServiceReferenceInterciti.Recorrido FindRecorridoById(int id) {
            return base.Channel.FindRecorridoById(id);
        }
        
        public System.Threading.Tasks.Task<WCFServiceApp.Test.ServiceReferenceInterciti.Recorrido> FindRecorridoByIdAsync(int id) {
            return base.Channel.FindRecorridoByIdAsync(id);
        }
        
        public WCFServiceApp.Test.ServiceReferenceInterciti.AñoVehiculo FindAñoVehiculoByIdAño(string id) {
            return base.Channel.FindAñoVehiculoByIdAño(id);
        }
        
        public System.Threading.Tasks.Task<WCFServiceApp.Test.ServiceReferenceInterciti.AñoVehiculo> FindAñoVehiculoByIdAñoAsync(string id) {
            return base.Channel.FindAñoVehiculoByIdAñoAsync(id);
        }
        
        public WCFServiceApp.Test.ServiceReferenceInterciti.ModeloVehiculo FindModeloVehiculoByModelo(string nombre) {
            return base.Channel.FindModeloVehiculoByModelo(nombre);
        }
        
        public System.Threading.Tasks.Task<WCFServiceApp.Test.ServiceReferenceInterciti.ModeloVehiculo> FindModeloVehiculoByModeloAsync(string nombre) {
            return base.Channel.FindModeloVehiculoByModeloAsync(nombre);
        }
        
        public int FindTipoVehiculoByTipo(string id) {
            return base.Channel.FindTipoVehiculoByTipo(id);
        }
        
        public System.Threading.Tasks.Task<int> FindTipoVehiculoByTipoAsync(string id) {
            return base.Channel.FindTipoVehiculoByTipoAsync(id);
        }
        
        public string GenerarPass() {
            return base.Channel.GenerarPass();
        }
        
        public System.Threading.Tasks.Task<string> GenerarPassAsync() {
            return base.Channel.GenerarPassAsync();
        }
        
        public System.Collections.Generic.List<WCFServiceApp.Test.ServiceReferenceInterciti.MisUbicaciones> ListarUbicaciones(int idCliente) {
            return base.Channel.ListarUbicaciones(idCliente);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WCFServiceApp.Test.ServiceReferenceInterciti.MisUbicaciones>> ListarUbicacionesAsync(int idCliente) {
            return base.Channel.ListarUbicacionesAsync(idCliente);
        }
        
        public WCFServiceApp.Test.ServiceReferenceInterciti.MisUbicaciones FindUbicacionByNombre(string nombre, int idCliente) {
            return base.Channel.FindUbicacionByNombre(nombre, idCliente);
        }
        
        public System.Threading.Tasks.Task<WCFServiceApp.Test.ServiceReferenceInterciti.MisUbicaciones> FindUbicacionByNombreAsync(string nombre, int idCliente) {
            return base.Channel.FindUbicacionByNombreAsync(nombre, idCliente);
        }
        
        public WCFServiceApp.Test.ServiceReferenceInterciti.MisUbicaciones FindUbicacionByID(int cedula) {
            return base.Channel.FindUbicacionByID(cedula);
        }
        
        public System.Threading.Tasks.Task<WCFServiceApp.Test.ServiceReferenceInterciti.MisUbicaciones> FindUbicacionByIDAsync(int cedula) {
            return base.Channel.FindUbicacionByIDAsync(cedula);
        }
        
        public int EliminarUbicacionesTemporales(int id) {
            return base.Channel.EliminarUbicacionesTemporales(id);
        }
        
        public System.Threading.Tasks.Task<int> EliminarUbicacionesTemporalesAsync(int id) {
            return base.Channel.EliminarUbicacionesTemporalesAsync(id);
        }
        
        public System.Collections.Generic.List<WCFServiceApp.Test.ServiceReferenceInterciti.Recorrido> GetRecorridos(int op) {
            return base.Channel.GetRecorridos(op);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WCFServiceApp.Test.ServiceReferenceInterciti.Recorrido>> GetRecorridosAsync(int op) {
            return base.Channel.GetRecorridosAsync(op);
        }
        
        public int AgregarUbicaciones(decimal lat, decimal lng, int idCreador, string nombre) {
            return base.Channel.AgregarUbicaciones(lat, lng, idCreador, nombre);
        }
        
        public System.Threading.Tasks.Task<int> AgregarUbicacionesAsync(decimal lat, decimal lng, int idCreador, string nombre) {
            return base.Channel.AgregarUbicacionesAsync(lat, lng, idCreador, nombre);
        }
        
        public System.Collections.Generic.List<WCFServiceApp.Test.ServiceReferenceInterciti.Recorrido> FindRecorridosByCliente(int id) {
            return base.Channel.FindRecorridosByCliente(id);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WCFServiceApp.Test.ServiceReferenceInterciti.Recorrido>> FindRecorridosByClienteAsync(int id) {
            return base.Channel.FindRecorridosByClienteAsync(id);
        }
        
        public System.Collections.Generic.List<WCFServiceApp.Test.ServiceReferenceInterciti.Recorrido> FindRecorridosByConductor(int id) {
            return base.Channel.FindRecorridosByConductor(id);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WCFServiceApp.Test.ServiceReferenceInterciti.Recorrido>> FindRecorridosByConductorAsync(int id) {
            return base.Channel.FindRecorridosByConductorAsync(id);
        }
        
        public bool SenMail(string to, string asunto, string mensaje) {
            return base.Channel.SenMail(to, asunto, mensaje);
        }
        
        public System.Threading.Tasks.Task<bool> SenMailAsync(string to, string asunto, string mensaje) {
            return base.Channel.SenMailAsync(to, asunto, mensaje);
        }
        
        public System.Collections.Generic.List<WCFServiceApp.Test.ServiceReferenceInterciti.MisUbicaciones> BuscarUbicaciones(int idCliente, string texto) {
            return base.Channel.BuscarUbicaciones(idCliente, texto);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WCFServiceApp.Test.ServiceReferenceInterciti.MisUbicaciones>> BuscarUbicacionesAsync(int idCliente, string texto) {
            return base.Channel.BuscarUbicacionesAsync(idCliente, texto);
        }
        
        public System.Collections.Generic.List<WCFServiceApp.Test.ServiceReferenceInterciti.Vehiculo> BuscarVehiculo(string texto) {
            return base.Channel.BuscarVehiculo(texto);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WCFServiceApp.Test.ServiceReferenceInterciti.Vehiculo>> BuscarVehiculoAsync(string texto) {
            return base.Channel.BuscarVehiculoAsync(texto);
        }
        
        public System.Collections.Generic.List<WCFServiceApp.Test.ServiceReferenceInterciti.Recorrido> BuscarRecorrido(int idCliente, string texto) {
            return base.Channel.BuscarRecorrido(idCliente, texto);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WCFServiceApp.Test.ServiceReferenceInterciti.Recorrido>> BuscarRecorridoAsync(int idCliente, string texto) {
            return base.Channel.BuscarRecorridoAsync(idCliente, texto);
        }
        
        public System.Collections.Generic.List<WCFServiceApp.Test.ServiceReferenceInterciti.Recorrido> BuscarRecorridoCo(int idConductor, string texto) {
            return base.Channel.BuscarRecorridoCo(idConductor, texto);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WCFServiceApp.Test.ServiceReferenceInterciti.Recorrido>> BuscarRecorridoCoAsync(int idConductor, string texto) {
            return base.Channel.BuscarRecorridoCoAsync(idConductor, texto);
        }
        
        public int EliminarUbicaciones(int idConductor) {
            return base.Channel.EliminarUbicaciones(idConductor);
        }
        
        public System.Threading.Tasks.Task<int> EliminarUbicacionesAsync(int idConductor) {
            return base.Channel.EliminarUbicacionesAsync(idConductor);
        }
        
        public int ActualizarUbicaciones(WCFServiceApp.Test.ServiceReferenceInterciti.MisUbicaciones conductor) {
            return base.Channel.ActualizarUbicaciones(conductor);
        }
        
        public System.Threading.Tasks.Task<int> ActualizarUbicacionesAsync(WCFServiceApp.Test.ServiceReferenceInterciti.MisUbicaciones conductor) {
            return base.Channel.ActualizarUbicacionesAsync(conductor);
        }
        
        public int FindMarcaVehiculoByMarca(string nombre) {
            return base.Channel.FindMarcaVehiculoByMarca(nombre);
        }
        
        public System.Threading.Tasks.Task<int> FindMarcaVehiculoByMarcaAsync(string nombre) {
            return base.Channel.FindMarcaVehiculoByMarcaAsync(nombre);
        }
        
        public WCFServiceApp.Test.ServiceReferenceInterciti.Conductor FindConductorByMail(string ci) {
            return base.Channel.FindConductorByMail(ci);
        }
        
        public System.Threading.Tasks.Task<WCFServiceApp.Test.ServiceReferenceInterciti.Conductor> FindConductorByMailAsync(string ci) {
            return base.Channel.FindConductorByMailAsync(ci);
        }
        
        public int AgregarCliente(string nombre, string pass, string apellido, string cedula, string correo, string telefono, System.DateTime fechaNacimiento, string token, byte[] pic) {
            return base.Channel.AgregarCliente(nombre, pass, apellido, cedula, correo, telefono, fechaNacimiento, token, pic);
        }
        
        public System.Threading.Tasks.Task<int> AgregarClienteAsync(string nombre, string pass, string apellido, string cedula, string correo, string telefono, System.DateTime fechaNacimiento, string token, byte[] pic) {
            return base.Channel.AgregarClienteAsync(nombre, pass, apellido, cedula, correo, telefono, fechaNacimiento, token, pic);
        }
        
        public System.Collections.Generic.List<WCFServiceApp.Test.ServiceReferenceInterciti.Cliente> ListarClientes() {
            return base.Channel.ListarClientes();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WCFServiceApp.Test.ServiceReferenceInterciti.Cliente>> ListarClientesAsync() {
            return base.Channel.ListarClientesAsync();
        }
        
        public int EliminarCliente(int idCliente) {
            return base.Channel.EliminarCliente(idCliente);
        }
        
        public System.Threading.Tasks.Task<int> EliminarClienteAsync(int idCliente) {
            return base.Channel.EliminarClienteAsync(idCliente);
        }
        
        public int ActualizarCliente(WCFServiceApp.Test.ServiceReferenceInterciti.Cliente cliente) {
            return base.Channel.ActualizarCliente(cliente);
        }
        
        public System.Threading.Tasks.Task<int> ActualizarClienteAsync(WCFServiceApp.Test.ServiceReferenceInterciti.Cliente cliente) {
            return base.Channel.ActualizarClienteAsync(cliente);
        }
        
        public int AgregarConductores(string nombre, string pass, int idVehiculo, string apellido, string cedula, string correo, string telefono, System.DateTime fechaNacimiento, bool estado, string token, byte[] pic) {
            return base.Channel.AgregarConductores(nombre, pass, idVehiculo, apellido, cedula, correo, telefono, fechaNacimiento, estado, token, pic);
        }
        
        public System.Threading.Tasks.Task<int> AgregarConductoresAsync(string nombre, string pass, int idVehiculo, string apellido, string cedula, string correo, string telefono, System.DateTime fechaNacimiento, bool estado, string token, byte[] pic) {
            return base.Channel.AgregarConductoresAsync(nombre, pass, idVehiculo, apellido, cedula, correo, telefono, fechaNacimiento, estado, token, pic);
        }
        
        public System.Collections.Generic.List<WCFServiceApp.Test.ServiceReferenceInterciti.Conductor> ListarConductores() {
            return base.Channel.ListarConductores();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WCFServiceApp.Test.ServiceReferenceInterciti.Conductor>> ListarConductoresAsync() {
            return base.Channel.ListarConductoresAsync();
        }
        
        public int EliminarConductor(int idConductor) {
            return base.Channel.EliminarConductor(idConductor);
        }
        
        public System.Threading.Tasks.Task<int> EliminarConductorAsync(int idConductor) {
            return base.Channel.EliminarConductorAsync(idConductor);
        }
        
        public int ActualizarConductor(WCFServiceApp.Test.ServiceReferenceInterciti.Conductor conductor) {
            return base.Channel.ActualizarConductor(conductor);
        }
        
        public System.Threading.Tasks.Task<int> ActualizarConductorAsync(WCFServiceApp.Test.ServiceReferenceInterciti.Conductor conductor) {
            return base.Channel.ActualizarConductorAsync(conductor);
        }
        
        public int AgregarAdmin(string nombre, string pass, string apellido, string cedula, string correo, string telefono, System.DateTime fechaNacimiento, bool estado, string token, byte[] pic) {
            return base.Channel.AgregarAdmin(nombre, pass, apellido, cedula, correo, telefono, fechaNacimiento, estado, token, pic);
        }
        
        public System.Threading.Tasks.Task<int> AgregarAdminAsync(string nombre, string pass, string apellido, string cedula, string correo, string telefono, System.DateTime fechaNacimiento, bool estado, string token, byte[] pic) {
            return base.Channel.AgregarAdminAsync(nombre, pass, apellido, cedula, correo, telefono, fechaNacimiento, estado, token, pic);
        }
        
        public System.Collections.Generic.List<WCFServiceApp.Test.ServiceReferenceInterciti.Admin> ListarAdmin() {
            return base.Channel.ListarAdmin();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WCFServiceApp.Test.ServiceReferenceInterciti.Admin>> ListarAdminAsync() {
            return base.Channel.ListarAdminAsync();
        }
        
        public int EliminarAdmin(int idAdmin) {
            return base.Channel.EliminarAdmin(idAdmin);
        }
        
        public System.Threading.Tasks.Task<int> EliminarAdminAsync(int idAdmin) {
            return base.Channel.EliminarAdminAsync(idAdmin);
        }
        
        public int ActualizarAdmin(WCFServiceApp.Test.ServiceReferenceInterciti.Admin admin) {
            return base.Channel.ActualizarAdmin(admin);
        }
        
        public System.Threading.Tasks.Task<int> ActualizarAdminAsync(WCFServiceApp.Test.ServiceReferenceInterciti.Admin admin) {
            return base.Channel.ActualizarAdminAsync(admin);
        }
        
        public int ActualizarTipo(WCFServiceApp.Test.ServiceReferenceInterciti.TipoVehiculo admin) {
            return base.Channel.ActualizarTipo(admin);
        }
        
        public System.Threading.Tasks.Task<int> ActualizarTipoAsync(WCFServiceApp.Test.ServiceReferenceInterciti.TipoVehiculo admin) {
            return base.Channel.ActualizarTipoAsync(admin);
        }
        
        public int ActualizarModelo(WCFServiceApp.Test.ServiceReferenceInterciti.ModeloVehiculo admin) {
            return base.Channel.ActualizarModelo(admin);
        }
        
        public System.Threading.Tasks.Task<int> ActualizarModeloAsync(WCFServiceApp.Test.ServiceReferenceInterciti.ModeloVehiculo admin) {
            return base.Channel.ActualizarModeloAsync(admin);
        }
        
        public int ActualizarMarca(WCFServiceApp.Test.ServiceReferenceInterciti.MarcaVehiculo admin) {
            return base.Channel.ActualizarMarca(admin);
        }
        
        public System.Threading.Tasks.Task<int> ActualizarMarcaAsync(WCFServiceApp.Test.ServiceReferenceInterciti.MarcaVehiculo admin) {
            return base.Channel.ActualizarMarcaAsync(admin);
        }
        
        public int ActualizarAnio(WCFServiceApp.Test.ServiceReferenceInterciti.AñoVehiculo admin) {
            return base.Channel.ActualizarAnio(admin);
        }
        
        public System.Threading.Tasks.Task<int> ActualizarAnioAsync(WCFServiceApp.Test.ServiceReferenceInterciti.AñoVehiculo admin) {
            return base.Channel.ActualizarAnioAsync(admin);
        }
        
        public int AgregarVehiculo(string placa, int tipo, int modelo, int año, int marca, byte[] pic) {
            return base.Channel.AgregarVehiculo(placa, tipo, modelo, año, marca, pic);
        }
        
        public System.Threading.Tasks.Task<int> AgregarVehiculoAsync(string placa, int tipo, int modelo, int año, int marca, byte[] pic) {
            return base.Channel.AgregarVehiculoAsync(placa, tipo, modelo, año, marca, pic);
        }
        
        public System.Collections.Generic.List<WCFServiceApp.Test.ServiceReferenceInterciti.Vehiculo> ListarVehiculo() {
            return base.Channel.ListarVehiculo();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WCFServiceApp.Test.ServiceReferenceInterciti.Vehiculo>> ListarVehiculoAsync() {
            return base.Channel.ListarVehiculoAsync();
        }
        
        public int EliminarVehiculo(int idVehiculo) {
            return base.Channel.EliminarVehiculo(idVehiculo);
        }
        
        public System.Threading.Tasks.Task<int> EliminarVehiculoAsync(int idVehiculo) {
            return base.Channel.EliminarVehiculoAsync(idVehiculo);
        }
        
        public int ActualizarVehiculo(WCFServiceApp.Test.ServiceReferenceInterciti.Vehiculo vehiculo) {
            return base.Channel.ActualizarVehiculo(vehiculo);
        }
        
        public System.Threading.Tasks.Task<int> ActualizarVehiculoAsync(WCFServiceApp.Test.ServiceReferenceInterciti.Vehiculo vehiculo) {
            return base.Channel.ActualizarVehiculoAsync(vehiculo);
        }
        
        public System.Collections.Generic.List<WCFServiceApp.Test.ServiceReferenceInterciti.Recorrido> ListarRecorrido() {
            return base.Channel.ListarRecorrido();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WCFServiceApp.Test.ServiceReferenceInterciti.Recorrido>> ListarRecorridoAsync() {
            return base.Channel.ListarRecorridoAsync();
        }
        
        public int AgregarRecorrido(decimal latitudOrigen, decimal longitudOrigen, decimal longitudDestino, decimal latitudDestino, System.DateTime fechaRecorrido, decimal valorRecorrido, int idConductor, int idCliente, int estado, int calif, string comentario) {
            return base.Channel.AgregarRecorrido(latitudOrigen, longitudOrigen, longitudDestino, latitudDestino, fechaRecorrido, valorRecorrido, idConductor, idCliente, estado, calif, comentario);
        }
        
        public System.Threading.Tasks.Task<int> AgregarRecorridoAsync(decimal latitudOrigen, decimal longitudOrigen, decimal longitudDestino, decimal latitudDestino, System.DateTime fechaRecorrido, decimal valorRecorrido, int idConductor, int idCliente, int estado, int calif, string comentario) {
            return base.Channel.AgregarRecorridoAsync(latitudOrigen, longitudOrigen, longitudDestino, latitudDestino, fechaRecorrido, valorRecorrido, idConductor, idCliente, estado, calif, comentario);
        }
        
        public int EliminarRecorrido(int idRecorrido) {
            return base.Channel.EliminarRecorrido(idRecorrido);
        }
        
        public System.Threading.Tasks.Task<int> EliminarRecorridoAsync(int idRecorrido) {
            return base.Channel.EliminarRecorridoAsync(idRecorrido);
        }
        
        public int ActualizarRecorrido(WCFServiceApp.Test.ServiceReferenceInterciti.Recorrido recorrido) {
            return base.Channel.ActualizarRecorrido(recorrido);
        }
        
        public System.Threading.Tasks.Task<int> ActualizarRecorridoAsync(WCFServiceApp.Test.ServiceReferenceInterciti.Recorrido recorrido) {
            return base.Channel.ActualizarRecorridoAsync(recorrido);
        }
        
        public WCFServiceApp.Test.ServiceReferenceInterciti.Cliente FindClienteByID(int id) {
            return base.Channel.FindClienteByID(id);
        }
        
        public System.Threading.Tasks.Task<WCFServiceApp.Test.ServiceReferenceInterciti.Cliente> FindClienteByIDAsync(int id) {
            return base.Channel.FindClienteByIDAsync(id);
        }
        
        public string sha512_hash(string value) {
            return base.Channel.sha512_hash(value);
        }
        
        public System.Threading.Tasks.Task<string> sha512_hashAsync(string value) {
            return base.Channel.sha512_hashAsync(value);
        }
        
        public string sha256_hash(string value) {
            return base.Channel.sha256_hash(value);
        }
        
        public System.Threading.Tasks.Task<string> sha256_hashAsync(string value) {
            return base.Channel.sha256_hashAsync(value);
        }
        
        public WCFServiceApp.Test.ServiceReferenceInterciti.Conductor FindConductorByCI(string ci) {
            return base.Channel.FindConductorByCI(ci);
        }
        
        public System.Threading.Tasks.Task<WCFServiceApp.Test.ServiceReferenceInterciti.Conductor> FindConductorByCIAsync(string ci) {
            return base.Channel.FindConductorByCIAsync(ci);
        }
        
        public WCFServiceApp.Test.ServiceReferenceInterciti.Conductor FindConductorByID(int id) {
            return base.Channel.FindConductorByID(id);
        }
        
        public System.Threading.Tasks.Task<WCFServiceApp.Test.ServiceReferenceInterciti.Conductor> FindConductorByIDAsync(int id) {
            return base.Channel.FindConductorByIDAsync(id);
        }
        
        public WCFServiceApp.Test.ServiceReferenceInterciti.Vehiculo FindVehiculoByID(int id) {
            return base.Channel.FindVehiculoByID(id);
        }
        
        public System.Threading.Tasks.Task<WCFServiceApp.Test.ServiceReferenceInterciti.Vehiculo> FindVehiculoByIDAsync(int id) {
            return base.Channel.FindVehiculoByIDAsync(id);
        }
        
        public int AgregarTipoVehiculo(string tipo) {
            return base.Channel.AgregarTipoVehiculo(tipo);
        }
        
        public System.Threading.Tasks.Task<int> AgregarTipoVehiculoAsync(string tipo) {
            return base.Channel.AgregarTipoVehiculoAsync(tipo);
        }
        
        public System.Collections.Generic.List<WCFServiceApp.Test.ServiceReferenceInterciti.TipoVehiculo> ListarTipoVehiculo() {
            return base.Channel.ListarTipoVehiculo();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WCFServiceApp.Test.ServiceReferenceInterciti.TipoVehiculo>> ListarTipoVehiculoAsync() {
            return base.Channel.ListarTipoVehiculoAsync();
        }
        
        public int EliminarTipoVehiculo(int idTipoVehiculo) {
            return base.Channel.EliminarTipoVehiculo(idTipoVehiculo);
        }
        
        public System.Threading.Tasks.Task<int> EliminarTipoVehiculoAsync(int idTipoVehiculo) {
            return base.Channel.EliminarTipoVehiculoAsync(idTipoVehiculo);
        }
        
        public System.Collections.Generic.List<WCFServiceApp.Test.ServiceReferenceInterciti.MarcaVehiculo> ListarMarcaVehiculo() {
            return base.Channel.ListarMarcaVehiculo();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WCFServiceApp.Test.ServiceReferenceInterciti.MarcaVehiculo>> ListarMarcaVehiculoAsync() {
            return base.Channel.ListarMarcaVehiculoAsync();
        }
        
        public int EliminarMarcaVehiculo(int idMarcaVehiculo) {
            return base.Channel.EliminarMarcaVehiculo(idMarcaVehiculo);
        }
        
        public System.Threading.Tasks.Task<int> EliminarMarcaVehiculoAsync(int idMarcaVehiculo) {
            return base.Channel.EliminarMarcaVehiculoAsync(idMarcaVehiculo);
        }
        
        public int AgregarAñoVehiculo(string año) {
            return base.Channel.AgregarAñoVehiculo(año);
        }
        
        public System.Threading.Tasks.Task<int> AgregarAñoVehiculoAsync(string año) {
            return base.Channel.AgregarAñoVehiculoAsync(año);
        }
        
        public System.Collections.Generic.List<WCFServiceApp.Test.ServiceReferenceInterciti.AñoVehiculo> ListarAnioVehiculo() {
            return base.Channel.ListarAnioVehiculo();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WCFServiceApp.Test.ServiceReferenceInterciti.AñoVehiculo>> ListarAnioVehiculoAsync() {
            return base.Channel.ListarAnioVehiculoAsync();
        }
        
        public int EliminarAñoVehiculo(int idÁñoVehiculo) {
            return base.Channel.EliminarAñoVehiculo(idÁñoVehiculo);
        }
        
        public System.Threading.Tasks.Task<int> EliminarAñoVehiculoAsync(int idÁñoVehiculo) {
            return base.Channel.EliminarAñoVehiculoAsync(idÁñoVehiculo);
        }
        
        public int AgregarModeloVehiculo(string año, int idMarca) {
            return base.Channel.AgregarModeloVehiculo(año, idMarca);
        }
        
        public System.Threading.Tasks.Task<int> AgregarModeloVehiculoAsync(string año, int idMarca) {
            return base.Channel.AgregarModeloVehiculoAsync(año, idMarca);
        }
        
        public int AgregarMarcaVehiculo(string marca) {
            return base.Channel.AgregarMarcaVehiculo(marca);
        }
        
        public System.Threading.Tasks.Task<int> AgregarMarcaVehiculoAsync(string marca) {
            return base.Channel.AgregarMarcaVehiculoAsync(marca);
        }
        
        public System.Collections.Generic.List<WCFServiceApp.Test.ServiceReferenceInterciti.ModeloVehiculo> ListarModeloVehiculo() {
            return base.Channel.ListarModeloVehiculo();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WCFServiceApp.Test.ServiceReferenceInterciti.ModeloVehiculo>> ListarModeloVehiculoAsync() {
            return base.Channel.ListarModeloVehiculoAsync();
        }
        
        public int EliminarModeloVehiculo(int idÁñoVehiculo) {
            return base.Channel.EliminarModeloVehiculo(idÁñoVehiculo);
        }
        
        public System.Threading.Tasks.Task<int> EliminarModeloVehiculoAsync(int idÁñoVehiculo) {
            return base.Channel.EliminarModeloVehiculoAsync(idÁñoVehiculo);
        }
        
        public WCFServiceApp.Test.ServiceReferenceInterciti.TipoVehiculo FindTipoVehiculoById(int id) {
            return base.Channel.FindTipoVehiculoById(id);
        }
        
        public System.Threading.Tasks.Task<WCFServiceApp.Test.ServiceReferenceInterciti.TipoVehiculo> FindTipoVehiculoByIdAsync(int id) {
            return base.Channel.FindTipoVehiculoByIdAsync(id);
        }
        
        public WCFServiceApp.Test.ServiceReferenceInterciti.AñoVehiculo FindAñoVehiculoById(int id) {
            return base.Channel.FindAñoVehiculoById(id);
        }
        
        public System.Threading.Tasks.Task<WCFServiceApp.Test.ServiceReferenceInterciti.AñoVehiculo> FindAñoVehiculoByIdAsync(int id) {
            return base.Channel.FindAñoVehiculoByIdAsync(id);
        }
        
        public WCFServiceApp.Test.ServiceReferenceInterciti.MarcaVehiculo FindMarcaVehiculoById(int id) {
            return base.Channel.FindMarcaVehiculoById(id);
        }
        
        public System.Threading.Tasks.Task<WCFServiceApp.Test.ServiceReferenceInterciti.MarcaVehiculo> FindMarcaVehiculoByIdAsync(int id) {
            return base.Channel.FindMarcaVehiculoByIdAsync(id);
        }
        
        public WCFServiceApp.Test.ServiceReferenceInterciti.ModeloVehiculo FindModeloVehiculoById(int id) {
            return base.Channel.FindModeloVehiculoById(id);
        }
        
        public System.Threading.Tasks.Task<WCFServiceApp.Test.ServiceReferenceInterciti.ModeloVehiculo> FindModeloVehiculoByIdAsync(int id) {
            return base.Channel.FindModeloVehiculoByIdAsync(id);
        }
        
        public System.Collections.Generic.List<WCFServiceApp.Test.ServiceReferenceInterciti.ModeloVehiculo> FindModeloVehiculoByMarca(int idMarca) {
            return base.Channel.FindModeloVehiculoByMarca(idMarca);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WCFServiceApp.Test.ServiceReferenceInterciti.ModeloVehiculo>> FindModeloVehiculoByMarcaAsync(int idMarca) {
            return base.Channel.FindModeloVehiculoByMarcaAsync(idMarca);
        }
        
        public WCFServiceApp.Test.ServiceReferenceInterciti.Cliente FindClienteByCI(string cedula) {
            return base.Channel.FindClienteByCI(cedula);
        }
        
        public System.Threading.Tasks.Task<WCFServiceApp.Test.ServiceReferenceInterciti.Cliente> FindClienteByCIAsync(string cedula) {
            return base.Channel.FindClienteByCIAsync(cedula);
        }
        
        public WCFServiceApp.Test.ServiceReferenceInterciti.Admin FindAdminByCI(string ci) {
            return base.Channel.FindAdminByCI(ci);
        }
        
        public System.Threading.Tasks.Task<WCFServiceApp.Test.ServiceReferenceInterciti.Admin> FindAdminByCIAsync(string ci) {
            return base.Channel.FindAdminByCIAsync(ci);
        }
        
        public WCFServiceApp.Test.ServiceReferenceInterciti.Admin FindAdminByCorreo(string ci) {
            return base.Channel.FindAdminByCorreo(ci);
        }
        
        public System.Threading.Tasks.Task<WCFServiceApp.Test.ServiceReferenceInterciti.Admin> FindAdminByCorreoAsync(string ci) {
            return base.Channel.FindAdminByCorreoAsync(ci);
        }
    }
}
